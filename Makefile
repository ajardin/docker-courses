##
## ----------------------------------------------------------------------------
##   Environment
## ----------------------------------------------------------------------------
##

build: ## Build the environment
	docker-compose build --pull
.PHONY: build

initialize: ## Initialize the application by installing PHP dependencies and creating the database schema
	docker-compose exec php sh -c "composer install --optimize-autoloader --classmap-authoritative"
	docker-compose exec php sh -c "bin/console doctrine:database:create --if-not-exists"
	docker-compose exec php sh -c "bin/console doctrine:schema:create"
.PHONY: initialize

logs: ## Follow logs generated by all containers
	docker-compose logs --follow --tail=0
.PHONY: logs

logs-full: ## Follow logs generated by all containers from the containers creation
	docker-compose logs --follow
.PHONY: logs-full

nginx: ## Open a terminal in the "nginx" container
	docker-compose exec --user=nginx:nginx nginx sh -l
.PHONY: nginx

php: ## Open a terminal in the "php" container
	docker-compose exec --user=www-data:www-data php sh -l
.PHONY: php

ps: ## List all containers managed by the environment
	docker-compose ps
.PHONY: ps

purge: ## Purge all services, local images, and associated volumes
	docker-compose down --rmi=local --volumes
.PHONY: purge

start: ## Start the environment
	@docker-compose up --detach --remove-orphans
.PHONY: start

stop: ## Stop the environment
	@docker-compose stop
.PHONY: stop

.DEFAULT_GOAL := help
help:
	@grep -E '(^[a-zA-Z_-]+:.*?##.*$$)|(^##)' $(MAKEFILE_LIST) \
		| awk 'BEGIN {FS = ":.*?## "}; {printf "\033[32m%-30s\033[0m %s\n", $$1, $$2}' \
		| sed -e 's/\[32m##/[33m/'
.PHONY: help
